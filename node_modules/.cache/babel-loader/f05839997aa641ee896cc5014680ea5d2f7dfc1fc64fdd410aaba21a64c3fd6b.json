{"ast":null,"code":"/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\nconst [input, setInput] = useState('');\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\nconst [recomendacionIA, setRecomendacionIA] = useState('');\nconst [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\nconst handleBuscarTexto = () => {\nconst texto = input.toLowerCase();\nconst filtradas = peliculas.filter((peli) =>\npeli.titulo.toLowerCase().includes(texto) ||\npeli.genero.toLowerCase().includes(texto) ||\npeli.titulo.toLowerCase().startsWith(texto)\n);\nsetPeliculasFiltradas(filtradas);\nsetPeliculasRecomendadas([]);\nsetRecomendacionIA('');\n};\nconst handleBuscarDescripcion = async () => {\nsetRecomendacionIA('Pensando...');\nsetPeliculasRecomendadas([]);\nsetPeliculasFiltradas([]);\ntry {\nconst response = await fetch('/api/recomendaciones', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON.stringify({\nprompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.\nmap(p => p.titulo).join(', ')}.\nQuiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta\ndescripci√≥n: \"${input}\".\nDevu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n}),\n});\nconst data = await response.json();\nconst textoIA = data.recomendacion.toLowerCase();\nsetRecomendacionIA(data.recomendacion);\nconst coincidencias = peliculas.filter((peli) =>\ntextoIA.includes(peli.titulo.toLowerCase())\n);\nsetPeliculasRecomendadas(coincidencias);\n} catch (err) {\nsetRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n}\n};\nreturn (\n<div className=\"App\">\n<h1 className=\"titulo\">CECYFLIX</h1>\n<div className=\"buscador\">\n<input\ntype=\"text\"\nplaceholder=\"¬øQu√© te gustar√≠a ver hoy?\"\nvalue={input}\nonChange={(e) => setInput(e.target.value)}\nrequired\n/>\n<button onClick={handleBuscarTexto}>Buscar</button>\n<button onClick={handleBuscarDescripcion} className=\"btn-ia\">\nBuscar por descripci√≥n</button>\n</div>\n{recomendacionIA && (\n<div className=\"bloque-recomendaciones\">\n<h2>‚ú® Recomendaci√≥n IA</h2>\n<p>{recomendacionIA}</p>\n</div>\n)}\n{peliculasRecomendadas.length > 0 && (\n<div className=\"galeria\">\n<h2>üéû Pel√≠culas recomendadas por IA</h2>\n<div className=\"grid\">\n{peliculasRecomendadas.map((peli) => (\n<div className=\"tarjeta\" key={peli.id}>\n<img src={peli.poster} alt={peli.titulo} />\n<div className=\"info\">\n<h3>{peli.titulo}</h3>\n<p>{peli.descripcion}</p>\n<span>{peli.genero}</span>\n</div>\n</div>\n))}\n</div>\n</div>\n)}\n{peliculasFiltradas.length > 0 && (\n<div className=\"galeria\">\n<h2>üé¨ Todas las pel√≠culas</h2>\n<div className=\"grid\">\n{peliculasFiltradas.map((peli) => (\n<div className=\"tarjeta\" key={peli.id}>\n<img src={peli.poster} alt={peli.titulo} />\n<div className=\"info\">\n<h3>{peli.titulo}</h3>\n<p>{peli.descripcion}</p>\n<span>{peli.genero}</span>\n</div>\n</div>\n))}\n</div>\n</div>\n)}\n</div>\n);\n}\nexport default App;*/\n\nconst [peliculas, setPeliculas] = useState([]);\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\nconst [busqueda, setBusqueda] = useState('');\nconst [modoDescripcion, setModoDescripcion] = useState(false);\nconst [recomendacion, setRecomendacion] = useState('');","map":{"version":3,"names":["peliculas","setPeliculas","useState","peliculasFiltradas","setPeliculasFiltradas","busqueda","setBusqueda","modoDescripcion","setModoDescripcion","recomendacion","setRecomendacion"],"sources":["C:/Users/diuve/Documents/CecytemGitHubYJira/Practica4_1/recomendaciones-ia/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\nconst [input, setInput] = useState('');\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\nconst [recomendacionIA, setRecomendacionIA] = useState('');\nconst [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\nconst handleBuscarTexto = () => {\nconst texto = input.toLowerCase();\nconst filtradas = peliculas.filter((peli) =>\npeli.titulo.toLowerCase().includes(texto) ||\npeli.genero.toLowerCase().includes(texto) ||\npeli.titulo.toLowerCase().startsWith(texto)\n);\nsetPeliculasFiltradas(filtradas);\nsetPeliculasRecomendadas([]);\nsetRecomendacionIA('');\n};\nconst handleBuscarDescripcion = async () => {\nsetRecomendacionIA('Pensando...');\nsetPeliculasRecomendadas([]);\nsetPeliculasFiltradas([]);\ntry {\nconst response = await fetch('/api/recomendaciones', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON.stringify({\nprompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.\nmap(p => p.titulo).join(', ')}.\nQuiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta\ndescripci√≥n: \"${input}\".\nDevu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n}),\n});\nconst data = await response.json();\nconst textoIA = data.recomendacion.toLowerCase();\nsetRecomendacionIA(data.recomendacion);\nconst coincidencias = peliculas.filter((peli) =>\ntextoIA.includes(peli.titulo.toLowerCase())\n);\nsetPeliculasRecomendadas(coincidencias);\n} catch (err) {\nsetRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n}\n};\nreturn (\n<div className=\"App\">\n<h1 className=\"titulo\">CECYFLIX</h1>\n<div className=\"buscador\">\n<input\ntype=\"text\"\nplaceholder=\"¬øQu√© te gustar√≠a ver hoy?\"\nvalue={input}\nonChange={(e) => setInput(e.target.value)}\nrequired\n/>\n<button onClick={handleBuscarTexto}>Buscar</button>\n<button onClick={handleBuscarDescripcion} className=\"btn-ia\">\nBuscar por descripci√≥n</button>\n</div>\n{recomendacionIA && (\n<div className=\"bloque-recomendaciones\">\n<h2>‚ú® Recomendaci√≥n IA</h2>\n<p>{recomendacionIA}</p>\n</div>\n)}\n{peliculasRecomendadas.length > 0 && (\n<div className=\"galeria\">\n<h2>üéû Pel√≠culas recomendadas por IA</h2>\n<div className=\"grid\">\n{peliculasRecomendadas.map((peli) => (\n<div className=\"tarjeta\" key={peli.id}>\n<img src={peli.poster} alt={peli.titulo} />\n<div className=\"info\">\n<h3>{peli.titulo}</h3>\n<p>{peli.descripcion}</p>\n<span>{peli.genero}</span>\n</div>\n</div>\n))}\n</div>\n</div>\n)}\n{peliculasFiltradas.length > 0 && (\n<div className=\"galeria\">\n<h2>üé¨ Todas las pel√≠culas</h2>\n<div className=\"grid\">\n{peliculasFiltradas.map((peli) => (\n<div className=\"tarjeta\" key={peli.id}>\n<img src={peli.poster} alt={peli.titulo} />\n<div className=\"info\">\n<h3>{peli.titulo}</h3>\n<p>{peli.descripcion}</p>\n<span>{peli.genero}</span>\n</div>\n</div>\n))}\n</div>\n</div>\n)}\n</div>\n);\n}\nexport default App;*/\n\nconst [peliculas, setPeliculas] = useState([]);\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\nconst [busqueda, setBusqueda] = useState('');\nconst [modoDescripcion, setModoDescripcion] = useState(false);\nconst [recomendacion, setRecomendacion] = useState('');\n\n"],"mappingskBAAkB,EAAEC,qBAAqB,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;AAChE,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;AAC5C,MAAM,CAACK,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;AAC7D,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}